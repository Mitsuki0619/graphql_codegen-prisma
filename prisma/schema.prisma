generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Post {
  id        Int         @id @default(autoincrement())
  content   String      @db.VarChar(255)
  userId    String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @default(now())
  User      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  PostLikes PostLikes[]
  PostTags  PostTags[]
  Tag       Tag[]
}

model Profile {
  displayName  String
  introduction String
  iconImage    String
  bannerImage  String
  userId       String   @unique
  updatedAt    DateTime @default(now())
  User         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String         @id
  name          String?
  email         String?        @unique
  emailVerified DateTime?
  password      String
  image         String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @default(now())
  Account       Account[]
  Message       Message[]
  Notification  Notification[]
  Post          Post[]
  PostLikes     PostLikes[]
  Profile       Profile?
  Session       Session[]
  MessageRoom   MessageRoom[]
}

model Account {
  id                String  @id
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  User              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Message {
  id          Int         @id @default(autoincrement())
  userId      String
  roomId      Int
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @default(now())
  MessageRoom MessageRoom @relation(fields: [roomId], references: [id])
  User        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model MessageRoom {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())
  Message   Message[]
  User      User[]
}

model Notification {
  id        Int      @id @default(autoincrement())
  userId    String?
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  User      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model PostLikes {
  postId  Int
  userId  String
  likedAt DateTime @default(now())
  Post    Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  User    User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([postId, userId])
}

model PostTags {
  postId     Int
  tagId      Int
  assignedAt DateTime @default(now())
  Post       Post     @relation(fields: [postId], references: [id])
  Tag        Tag      @relation(fields: [tagId], references: [id])

  @@id([postId, tagId])
}

model Session {
  id           String   @id
  sessionToken String   @unique
  userId       String
  expires      DateTime
  User         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Tag {
  id       Int        @id @default(autoincrement())
  name     String
  postId   Int?
  PostTags PostTags[]
  Post     Post?      @relation(fields: [postId], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
